import IMask from"imask";class ValidateMe{constructor(e){this.form=e,this.fields=[],this.form.fields&&this.initializeFields()}initializeFields(){for(const e of this.form.fields)this.addField(e);delete this.form.fields}addField(e){let t=$.extend({},this.baseFieldAttr,e);if(t.$el=this.form.$el.find('[name="'+t.name+'"]'),this.isValidOptions(t)&&!this.getField(t.name)){if(t.id=t.$el.attr("id")||null,t.placeholder=t.$el.attr("placeholder")||null,!t.type){let e=t.$el.prop("tagName").toLowerCase();t.type="input"===e?t.$el.prop("type").toLowerCase():e,"select"===t.type&&(t.defaultValue=t.$el.find("[default]").length>0?t.$el.find("[default]"):t.$el.find("option").eq(0))}t.$copy=t.copy?this.form.$el.find('[name="'+t.copy+'"]'):null,t.regex=t.regex?t.regex:this.customFieldType[t.type]?this.customFieldType[t.type].regex:null,t.mask_options=t.mask_options?t.mask_options:this.customFieldType[t.type]?this.customFieldType[t.type].mask_options:null,t.mask_options&&(t.mask=IMask(t.$el[0],t.mask_options)),this.fields.push(t)}}removeField(e){let t=this.getField(e);t&&this.fields.splice(this.fields.indexOf(t),1)}getField(e){return this.fields.find(t=>t.name===e)}updateMask(e,t,i){this.fields.find(l=>{l.name===e&&l.mask[t](i)})}validate(){this.invalidFields=[];for(let e of this.fields){let t=!!this.validations.default(e);t&&this.validations[e.type]&&(t=!!this.validations[e.type](e),t&&e.validation&&(t=!!e.validation(e))),t||this.invalidFields.push(e),"file"===e.type?e.value=e.$el.files:e.value=e.$el.val()}return this.hasError?this.form.onValidationError(this.fields,this.invalidFields):this.form.$el.attr("ajax")&&this.form.onValidationSuccess(this.fields),!this.hasError}isValidOptions(e){let t=!0;return 0===e.$el.length&&(t=!1,console.error("Couldn't find field with associated name :: "+e.name)),e.type&&(Object.keys(this.customFieldType).includes(e.type)||(t=!1,console.warn(`The type you want for the ${e.name} field is not supported so it will be validate as a text field. Please refer to documentation.`))),e.required&&"boolean"!=typeof e.required&&(t=!1,console.error(`Parammeter 'required' of ${e.name} the field must be boolean.`)),e.copy&&this.form.$el.find('[name="'+e.copy+'"]').length<1&&(t=!1,console.error("Couldn't find field that need to have the same value with associated name :: "+e.name)),!e.regex||e.regex instanceof RegExp||(t=!1,console.error(`RegExp on ${e.name} field is not valid.`)),e.filesize&&"number"!=typeof e.filesize&&(t=!1,console.error("Filesize must be a Number.")),e.placeholder&&"string"!=typeof e.placeholder&&(t=!1,console.error("Placeholder must be String.")),e.validation&&"function"!=typeof e.validation&&(t=!1,console.error("Validation must be function.")),t}reset(){$.each(this.fields,(function(e,t){"checkbox"===t.type||"radio"===t.type?t.$el.attr("checked",!1):"select"===t.type?t.$el.val(t.defaultValue.val()):t.$el.val(""),t.$el.trigger("change")}))}set form(e){this._form=e}get form(){return this._form}set invalidFields(e){"object"==typeof e?this._invalidFields=e:console.error("The arr parameter must be an array")}get invalidFields(){return this._invalidFields}get baseFieldAttr(){return{name:null,type:null,error_code:null,required:!0,copy:null,regex:null,placeholder:null,validation:null,default_ok:!1,file_size:null,file_type:null,mask_options:null}}get customFieldType(){return{email:{regex:new RegExp(/^[a-zA-Z0-9._+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/)},phone:{regex:new RegExp(/^(?:\+?1)?[-. ]?\(?[2-9][0-8][0-9]\)?[-. ]?[2-9][0-9]{2}[-. ]?[0-9]{4}$/i)},zipcode:{regex:new RegExp(/^[ABCEGHJKLMNPRSTVWXYZ][0-9][ABCEGHJKLMNPRSTVWXYZ]?[ ]?[0-9][ABCEGHJKLMNPRSTVWXYZ][0-9]$/i)}}}get validations(){return{default:e=>{let t=!0,i=!!e.required||!e.required&&(!!e.$el.val()||!!e.$copy&&e.$copy.val().length>1);return e.error_code=null,i&&(t&&!e.$el.val()&&(t=!1,e.error_code="empty"),t&&e.$copy&&e.$copy.val()!==e.$el.val()&&(t=!1,e.error_code="copy"),t&&e.regex&&!e.regex.test(e.$el.val())&&(t=!1,e.error_code="regex")),t},text:e=>!0,select:e=>{let t=!0;return e.required&&!e.default_ok&&e.$el.val()===e.defaultValue.val()&&(t=!1,e.error_code="default_ok"),t},checkbox:e=>{let t=!0;return e.required&&0===e.$el.filter(":checked").length&&(t=!1,e.error_code="empty"),t},radio:e=>{let t=!0;return e.required&&0===e.$el.filter(":checked").length&&(t=!1,e.error_code="empty"),t},file:e=>{let t=!0,i=!0,l=/(?:\.([^.]+))?$/;if(e.required&&0==e.$el[0].files.length)return t=!1,e.error_code="empty",t;for(let t of e.$el[0].files)for(let r in e.file_type){let o=l.exec(t.name);e.file_type[r]!=o[0]&&(i=!1)}if(!i)return t=!1,e.error_code="filetype",t;if(e.file_size)for(let i of e.$el[0].files)if(i.size/1e3>e.file_size)return t=!1,e.error_code="size",t;return t}}}get hasError(){return this.invalidFields.length>0}}window.Me||(window.Me={}),Me.validate=ValidateMe;